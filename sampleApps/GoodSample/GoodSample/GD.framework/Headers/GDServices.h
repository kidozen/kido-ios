/*
 * (c) 2014 Good Technology Corporation. All rights reserved.
 * The documentation in this file is also used elsewhere
 */

#ifndef __GD_SERVICES_H__
#define __GD_SERVICES_H__

#import <Foundation/Foundation.h>

/** \defgroup iccerrors Good Inter-Container Communication Errors
 * These constants can be used for handling or generating errors when
 * using the Good Inter-Container Communication (ICC) sytem.
 *
 * Errors can be generated by the ICC system itself, or by service provider
 * applications working within the system. See the individual error codes'
 * documentation for a description of when each code is to be used, and note the
 * following.
 *
 * The <EM>NotFound</EM> codes are for use when the service, service version, or
 * method in a request is not offered by the provider application to which the
 * request was sent.
 * 
 * The <EM>Disabled</EM> codes are for use when the service, service version,
 * and method are generally offered by the provider application, but support is
 * currently disabled by a policy setting or other condition that is, in
 * principle, temporary.
 * \{
 */

extern NSString* const GDServicesErrorDomain;
/**< The error domain for Good Inter-Container Communication errors.
 * This domain is for service errors in the Good Dynamics
 * Inter-Container Communication (ICC) system. Note that this domain is not used
 * for errors that are specific to a service or service provider application.
 * 
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 *
 * An <TT>NSError</TT> with this value as its domain could be encountered as
 * any of the following:
 * - In the <TT>error</TT> parameter following a call to
 *    \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink where the request was not accepted by the ICC
 *   system.
 * - In the <TT>error</TT> parameter following a call to
 *    \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink where the response was not accepted by the ICC
 *   system.
 * - As the <TT>params</TT> object passed to an invocation of
 *    \link GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom\endlink where a request that had
 *   been accepted subsequently failed in the system.
 * .
 * Of the above, <TT>sendTo:</TT> and
 * <TT>GDServiceClientDidReceiveFrom:</TT> are part of the service consumer
 * side of the ICC API, and <TT>replyTo:</TT> is part of the service provider
 * side.
 */

extern NSInteger const GDServicesErrorGeneral; 
/**< A general Inter-Container Communication error occurred.
 */

extern NSInteger const GDServicesErrorApplicationNotFound; 
/**< The service consumer sent a request to an application that could not be
 * found on the device.
 */

extern NSInteger const GDServicesErrorServiceNotFound;
/**< The service consumer sent a request that specified a service that is not
 * supported by the service provider.
 */

extern NSInteger const GDServicesErrorServiceVersionNotFound;
/**< The service consumer sent a request that specified a service version that
 * is not supported by the service provider.
 */

extern NSInteger const GDServicesErrorMethodNotFound;
/**< The service consumer sent a request that specified a method that is not
 * supported by the service provider.
 */

extern NSInteger const GDServicesErrorNotAllowed;
/**< The service consumer sent a request to an application that could not be
 * unlocked.
 */

extern NSInteger const GDServicesErrorInvalidParams;
/**< The application attempted to utilize an unsupported type as a service
 * parameter, either in a service request or in a service response.
 */

extern NSInteger const GDServicesErrorCertificateNotFound;
/**< The application attempted to establish a connection but could not find
 * a valid X509 certificate.
 */

extern NSInteger const GDServicesMethodDisabled;
/**< The service consumer sent a request that specified a method that has been
 * disabled in the service provider.
 */

extern NSInteger const GDServicesVersionDisabled;
/**< The service consumer sent a request that specified a service version that
 * has been disabled in the service provider.
 */

extern NSInteger const GDServicesServiceDisabled;
/**< The service consumer sent a request that specified a service that has been
 * disabled in the service provider.
 */

/** \}
 */

/** \defgroup iccconstants Good Inter-Container Communication Miscellaneous Constants
 * These miscellaneous constants can be used with the Good Inter-Container
 * Communication (ICC) sytem.
 *
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 * 
 * \{
 */

/** Constants for specifying foreground execution preference.
 * This enumeration represents a preference for which application is to
 * execute in foreground. The <TT>option</TT> parameter of the
 *  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink and  \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink functions
 * always takes one of these values. See function references for details.
 */

typedef NS_ENUM(NSInteger, GDTForegroundOption)
{
    GDEPreferMeInForeground,
    /**< The current application is to be in the foreground. */
    
    GDEPreferPeerInForeground,
    /**< The other application is to be in the foreground. */
    
    GDENoForegroundPreference
    /**< There is no preference for which application is in foreground. */
    
};

extern NSString* const GDFrontRequestService;
/**< Good Dynamics service ID for the Front Request API.
 * Use this constant when sending or identifying front requests. See under
 * Foreground Execution and Front Request API in the   \link GDService GDService class reference\endlink.
 */

extern NSString* const GDFrontRequestMethod;
/**< Method name for the Front Request API.
 * Use this constant for identifying the front request method. See under
 * Foreground Execution and Front Request API in the   \link GDService GDService class reference\endlink.
 */

/** \}
 */

/** Handler for Good Inter-Container Communication consumer events.
 * Responses to service requests within the Good Inter-Container
 * Communication (ICC) system are handled by creating a class that implements
 * this protocol.
 *
 * This class is part of the service consumer side of the ICC API.
 *
 * The  \link GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom\endlink callback would be
 * invoked after the application had sent a service request to a service
 * provider, and the provider had responded or an error had occurred.
 * 
 * \see   \link GDService GDService class reference\endlink for an overall description of ICC.
 *
 * This class also includes a callback that is invoked whenever transmission of
 * a service request completes.
 */
@protocol GDServiceClientDelegate
@required
- (void) GDServiceClientDidReceiveFrom:(NSString*)application
                            withParams:(id)params
                       withAttachments:(NSArray*)attachments
              correspondingToRequestID:(NSString*)requestID;
/**< Good Inter-Container Communication service response callback.
 * This callback is invoked when a response is received to a service
 * request that was sent within the Good Inter-Container Communication (ICC)
 * system.
 * The parameters give the details of the service response.
 * 
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 * 
 * A service response may be received in relation to a call to
 *  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink that was accepted by the ICC system.
 *
 * The response can include file attachments and a results object from the
 * provider application.
 * Check the type of the results object to determine whether the service
 * request succeeded.
 *
 * If the results object is of type
 * <TT>NSError</TT> then the service request
 * failed.
 * The error domain of the object will either be the
 * <TT>GDServicesErrorDomain</TT> value, in the case of a generic ICC failure,
 * or a value that is specific to the service or to the provider application.
 * In any case, the <TT>NSError</TT> object should have a suitable error
 * code, a <TT>localizedDescription</TT>, and possibly additional data in its
 * <TT>userInfo</TT> dictionary. See also the <A
 *     href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSError_Class/Reference/Reference.html"
 *     target="_blank"
 * >NSError class reference</A> in the iOS Developer Library on apple.com for
 * the full API.
 * 
 * If the results object is not of type
 * <TT>NSError</TT> then the service request
 * succeeded. In that case the results object will be of a valid service
 * parameter type, as defined under Service Parameters in the
 *   \link GDService GDService class reference\endlink.
 * 
 * \param application <TT>NSString</TT> containing the native application identifier of
 * the provider application to which the original service request was sent.
 *
 * \param params The results object, as returned by the provider application.
 * 
 * \param attachments <TT>NSArray</TT> of <TT>NSString</TT>
 * objects containing the paths of files that were attached to the service
 * response.
 * See under File Attachments in the   \link GDService GDService class reference\endlink.
 * 
 * \param requestID <TT>NSString</TT> containing the ID assigned to the original
 * service request.
 * An application that makes multiple concurrent service requests can use this
 * value to tie the response back to the original request.
 * The application must have retained the ID from when
 *  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink was originally called.
 */

@optional
- (void) GDServiceClientDidStartSendingTo:(NSString*)application withFilename:(NSString*)filename correspondingToRequestID:(NSString*)requestID;
/**< Good Inter-Container Communication service request file attachment
 *   transmission start callback.
 * This callback is invoked whenever the delivery of a service request
 * file attachment via the Good Inter-Container Communication (ICC) system
 * starts. The path of the file is passed as a parameter.
 *
 * Invocation of this callback notifies the application that the ICC system has
 * started transferring the data in the file to the recipient of the service
 * request.
 *
 * The function that is invoked could display a sending status in its user
 * interface. The sending status could be cleared on receipt of the
 * <TT>GDServiceClientDidFinishSendingTo:</TT>
 * callback.
 *
 * \see  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink for details of sending service requests.
 * 
 * \param application <TT>NSString</TT> containing the native application identifier of
 *                    the recipient of the file.
 * 
 * \param filename <TT>NSString</TT> containing the path in the secure store of the
 *                 file that is now being sent.
 *
 * \param requestID <TT>NSString</TT> containing the unique ID of the service request
 *                  to which the file is attached.
 */

@optional
- (void) GDServiceClientDidFinishSendingTo:(NSString*)application withAttachments:(NSArray*)attachments withParams:(id)params correspondingToRequestID:(NSString*)requestID;
/**< Good Inter-Container Communication service request transmission complete
 *   callback.
 * This callback is invoked whenever the delivery of a service request
 * via the Good Inter-Container Communication (ICC) system completes.
 *
 * Invocation of this callback notifies the application that:
 * - Any files that were attached to the service request have been copied to the
 * secure store of the service provider.
 * - An independent copy of the parameters of the request, if any, has been made
 * available to the service provider.
 * .
 * The function that is invoked can delete or modify any of the original
 * file attachments, and free any resources used to hold the request
 * parameters.
 *
 * \see  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink for details of sending service requests.
 * 
 * \param requestID <TT>NSString</TT> containing the unique ID of the service request
 * whose sending has completed.
 * 
 * \param attachments <TT>NSArray</TT> of <TT>NSString</TT>
 * objects containing the paths of any files that were attached to the service
 * request.
 *
 * \param params Reference to the parameters object of the service request.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 * the application to which the service request was sent.
 */

@end


/** Good Inter-Container Communication service consumer.
 * This class is mandatory for service consumer applications within the
 * Good Inter-Container Communication (ICC) system.
 * This class also includes the specific API for sending ICC service requests.
 *
 * To utilize this API the application must meet the requirements listed under
 * Service Consumer Requirements, below.
 * 
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 * 
 * The functions in this API cannot be used until Good Dynamics
 * authorization processing is
 * complete, see under  \link GDiOS::authorize: authorize (GDiOS)\endlink.
 * 
 * \see  \link iccerrors Good Inter-Container Communication Errors\endlink
 * 
 * <H3>Service Consumer Requirements</H3>
 * To function as an ICC service consumer, a GD application must:
 * - Instantiate a single object of the <TT>GDServi</TT><TT>ceClient</TT> class.
 * - Set the delegate to an instance of a class that
 *   implements the  \link GDServiceClientDelegate GDServiceClientDelegate\endlink
 *   protocol, typically
 *   <TT>self</TT>.
 * - Register the ICC URL type on the
 *   device. This will normally be achieved by utilizing the mandatory Good
 *   Dynamics build-time configuration, as detailed in the \link GDiOS\endlink
 *   class reference.
 * .
 * Note that an application that consumes multiple services still instantiates
 * only a single object of this class.
 * The delegate of the object handles responses from
 * all the services that the application consumes.
 */
@interface GDServiceClient : NSObject

+ (BOOL) sendTo:(NSString*)application
    withService:(NSString*)service
    withVersion:(NSString*)version
     withMethod:(NSString*)method
     withParams:(id)params
withAttachments:(NSArray*)attachments
bringServiceToFront:(GDTForegroundOption)option
      requestID:(NSString**)requestID
          error:(NSError**)error;
/**< Send a Good Inter-Container Communication service request.
 * Call this function to send a service request to a service
 * provider application in the Good Inter-Container Communication (ICC)
 * system.
 * The request includes a method name, and can include service parameters and
 * file attachments to be conveyed to the provider application.
 *
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 * 
 * The ICC system will assign a unique ID to the service request and make this
 * available to the application. This value will also be returned with any
 * response to the request. An application that makes multiple concurrent
 * requests can use the request ID to match responses with requests.
 * 
 * \param application <TT>NSString</TT> containing the
 * native bundle identifier of the service
 * provider application.
 * A suitable value could be obtained from the address field of a
 * <TT>GDServiceProvider</TT> object returned by the  \link GDiOS::getServiceProvidersFor:andVersion:andType:  getServiceProvidersFor:  (GDiOS)\endlink
 * function.
 *
 * \param service <TT>NSString</TT> containing the ID of the service to which the
 * request is being sent.
 * The value should correspond to a service that the service provider
 * application offers.
 *
 * \param version <TT>NSString</TT> containing the version identifier of the service
 * being requested.
 * The value should correspond to a version of service that the service provider
 * application offers.
 *
 * \param method <TT>NSString</TT> containing the name of the method, within the
 * service, that is being requested.
 * The value should correspond to the name of a method that the service provider
 * application offers.
 *
 * \param params The service parameters object for the request.
 * See under Service Parameters in the   \link GDService GDService class reference\endlink.
 *
 * \param attachments <TT>NSArray</TT> of <TT>NSString</TT>
 * objects containing the paths of files
 * in the Good Dynamics secure file system
 * that are to be attached to the request.
 * See under File Attachments in the   \link GDService GDService class reference\endlink.
 *
 * \param option <TT>GDTForegroundOption</TT> specifying the foreground execution preference
 * for processing of the request:\n
 * <TT>GDEPreferPeerInForeground</TT> for the provider application being in the foreground,\n
 * <TT>GDEPreferMeInForeground</TT> for this application being in the foreground,\n
 * <TT>GDENoForegroundPreference</TT> to specify that there is no preference.\n
 * See also the notes under Foreground Execution in the   \link GDService GDService class reference\endlink.
 *
 * \param requestID Location of a an <TT>NSString</TT> pointer for returning the
 * unique ID assigned to the request by the ICC system.
 *
 * \param error For returning an <TT>NSError</TT> object if an error occurs. If <TT>nil</TT>, no object will be returned.
 *
 * \return <TT>YES</TT> if the request was accepted by the ICC system.
 * The result of the service request could be notified to the application by
 * invocation of its <TT>GDServiceClientDidReceiveFrom</TT> callback, depending
 * on the service, and whether the request is able to be delivered. See
 * \ref iccerrors.
 * \return <TT>NO</TT> Otherwise. The <TT>error</TT> location, if provided, will
 * be set to point to an <TT>NSError</TT> object with details of the error
 * condition.
 */

+ (BOOL) cancelRequest:(NSString*)requestID toApplication:(NSString*)application;
/**< Cancel a Good Inter-Container Communication service request.
 * Call this function to cancel service requests in the Good
 * Inter-Container Communication (ICC) system. The application can only cancel
 * requests that it sent, not requests sent by other applications.
 *
 * This function can be used to cancel a single service request. Specify the
 * unique ID of the request, which will have been generated when
 *  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink was called.
 *
 * This function can also be used to cancel all service requests addressed
 * to a specific application.
 *
 * Cancellation of a request can succeed or fail. If cancellation succeeds:
 * - The
 *   <TT>GDServiceClientDidFinishSendingTo:</TT>
 *   callback in the sending application is not subsequently invoked.
 * - The  \link GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom\endlink callback in the
 *   receiving application will not be invoked.
 * .
 * Cancellation will fail if the service request has already been delivered, in
 * which case the above callback invocations would take place.
 *
 * \param requestID <TT>NSString</TT> containing the ID of the request to be cancelled,
 *                  or <TT>nil</TT> to cancel all requests to the specified
 *                  recipient.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 *                    the recipient to which the request or requests were sent.
 *
 * \return <TT>YES</TT> if one or more requests were cancelled.
 * \return <TT>NO</TT> otherwise. This function returns <TT>NO</TT> if there is
 *                   no service request that matches the specified values, or if
 *                   none of the requests that match could be cancelled.
 */

+ (BOOL) bringToFront:(NSString*)application error:(NSError**)error;
/**< Bring another application to the foreground.
 * Call this function to bring another application to the
 * foreground. This would typically be used when a service provider application
 * has requested foreground execution to process a request that has already been
 * sent. See under Foreground Execution in the   \link GDService GDService class reference\endlink for
 * details.
 * 
 * This function cannot be used outside the context of service
 * request processing.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 * the application to be brought to the foreground.
 *
 * \param error For returning an <TT>NSError</TT> object if an error occurs. If <TT>nil</TT>, no object will be returned.
 * \return <TT>YES</TT> if the specified application was brought to the
 * foreground, based on the return code from the native API.
 * \return <TT>NO</TT> otherwise.
 */

@property (assign, getter = getDelegate, setter = setDelegate:) id<GDServiceClientDelegate> delegate;
/**< Handler for responses to service requests.
 * When a response to an ICC service request is received, the Good
 * Dynamics Runtime dispatches an event to a callback function within the
 * application.
 * 
 * Set this property to an instance of a class in the application that contains
 * the code for the required callback function
 * , i.e. a class that implements
 * the  \link GDServiceClientDelegate GDServiceClientDelegate\endlink protocol.
 * The class should be coded to handle responses from service providers to
 * which the application sends service requests.
 * 
 * Note that there is only one delegate, that handles
 * all service responses received by the application.
 *
 */

@end

/** Good Inter-Container Communication service provider implementation.
 * Service requests received within the Good Inter-Container
 * Communication (ICC) system are handled by creating a class that implements
 * this protocol.
 * 
 * This class is part of the service provider side of the ICC API.
 * 
 * \see   \link GDService GDService class reference\endlink for an overall description of ICC.
 *
 * This class also includes a callback that is invoked whenever transmission of
 * a service response completes.
 */
@protocol GDServiceDelegate

@required
- (void) GDServiceDidReceiveFrom:(NSString*)application
                      forService:(NSString*)service
                     withVersion:(NSString*)version
                       forMethod:(NSString*)method
                      withParams:(id)params
                 withAttachments:(NSArray*)attachments
                    forRequestID:(NSString*)requestID;
/**< Good Inter-Container Communication service request callback.
 * This callback is invoked when a service request is sent to the
 * application within the Good Inter-Container Communication (ICC) system.
 * The parameters with which this function is called give the details of
 * the service request.
 *
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 * 
 * When this callback is invoked, the application must:
 * -# Check that the service request is valid.
 * -# Process the request, if valid.
 * -# If required by the service definition or other published API, respond to
 *    the request with a success or failure result by calling the
 *     \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink function.
 * .
 * If the application determines that a service request is invalid then the
 * application should return an error in the <TT>replyTo</TT> call. For some
 * check failures, the application must set a particular code in the returned
 * error. These are documented in the Parameters section, below.
 * \see  \link iccerrors Good Inter-Container Communication Errors\endlink.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 * the consumer application that sent the service request.
 * The application is not required to check the value, but may do so.
 * For example, the application could be coded only to process service requests
 * from a known set of consumer applications, and to fail requests from unknown
 * applications.
 *
 * \param service <TT>NSString</TT> containing the name of the service being requested.
 * The application must check the value.
 * If the application does not offer the requested service then the
 * <TT>GDServicesErrorServiceNotFound</TT> code must be set.
 *
 * \param version <TT>NSString</TT> containing the version identifier of the service
 * being requested.
 * The application must check the value.
 * If the application does not offer the requested service version then the
 * <TT>GDServicesErrorServiceVersionNotFound</TT> code must be set.
 *
 * \param method <TT>NSString</TT> containing the name of the method within the service
 * request.
 * The application must check the value.
 * If the application does not offer the requested method then the
 * <TT>GDServicesErrorMethodNotFound</TT> code must be set.
 *
 * \param params The service parameters in the request, sent by the consumer
 * application.
 * See under Service Parameters in the   \link GDService GDService class reference\endlink.
 * If the service parameters are in some way invalid then a service-specific
 * error code could be set, or this could be handled in some other way according
 * to the service definition.
 *
 * \param attachments <TT>NSArray</TT> of <TT>NSString</TT>
 * objects containing the paths of files that were attached to the service
 * request.
 * See under File Attachments in the   \link GDService GDService class reference\endlink.
 * If the file attachments are in some way invalid then a service-specific
 * error code could be set in the results object, or this could be handled in
 * some other way according to the service definition.
 * 
 * \param requestID <TT>NSString</TT> containing the unique ID assigned to this service
 * request by the ICC system.
 * The application must pass this value as the <TT>requestID</TT> parameter in
 * the  \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink call if it responds to the request.
 */

@optional

- (void) GDServiceDidStartSendingTo:(NSString*)application withFilename:(NSString*)filename correspondingToRequestID:(NSString*)requestID;
/**< Good Inter-Container Communication service response file attachment
 *   transmission start callback.
 * This callback is invoked whenever the delivery of a service response
 * file attachment via the Good Inter-Container Communication (ICC) system
 * starts. The path of the file is passed as a parameter.
 *
 * Invocation of this callback notifies the application that the ICC system has
 * started transferring the data in the file to the recipient of the service
 * response.
 *
 * The function that is invoked could display a sending status in its user
 * interface. The sending status could be cleared on receipt of the
 * <TT>GDServiceDidFinishSendingTo:</TT>
 * callback.
 *
 * \see  \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink for details of sending a service response.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 *                    the recipient of the file.
 *
 * \param filename <TT>NSString</TT> containing the path in the secure store of the
 *                 file that is now being sent.
 *
 * \param requestID <TT>NSString</TT> containing the unique ID of the original service
 *                  request, the response to which the file is attached.
 */

- (void) GDServiceDidFinishSendingTo:(NSString*)application withAttachments:(NSArray*)attachments withParams:(id)params correspondingToRequestID:(NSString*)requestID;
/**< Good Inter-Container Communication service response transmission complete callback.
 * This callback is invoked whenever the delivery of a service response
 * via the Good Inter-Container Communication (ICC) system completes.
 *
 * Invocation of this callback notifies the application that:
 * - Any files that were attached to the service response have been copied to the
 * secure store of the service consumer.
 * - An independent copy of the parameters of the response, if any, has been made
 * available to the service consumer.
 * .
 * The function that is invoked can delete or modify any of the original
 * file attachments, and free any resources used to hold the response
 * parameters.
 *
 * \see  \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink for details of sending service responses.
 * 
 * \param requestID <TT>NSString</TT> containing the unique ID of the service request
 * to which the sending of the response has completed.
 * 
 * \param attachments <TT>NSArray</TT> of <TT>NSString</TT>
 * objects containing the paths of any files that were attached to the service
 * response.
 *
 * \param params Reference to the parameters object of the service response.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 * the application to which the service response was sent.
 */

@end

/** Good Inter-Container Communication service provider.
 * This class is mandatory for service provider applications within the
 * Good Inter-Container Communication (ICC) system.
 * This class also includes the specific API for sending ICC service responses.
 * This API would be utilized in the code of the
 * delegate of this class.
 * 
 * 
 * For an overall description of ICC, see under
 * Good Inter-Container Communication below.
 * To utilize this API the application must meet the requirements listed under
 * Service Provider Requirements.
 *
 * The functions in the ICC APIs utilize <TT>NSError</TT> in a conventional way. Function calls accept as a parameter the location of a pointer to <TT>NSError</TT>, i.e. a pointer to a pointer, with type <TT>NSError**</TT>. The location may be <TT>nil</TT>. If the location is not <TT>nil</TT>, and an error occurs, the Good Dynamics Runtime overwrites the pointer at the specified location with the address of an object that describes the error that occurred.
 * 
 * The functions in this API cannot be used until Good Dynamics
 * authorization processing is
 * complete, see under  \link GDiOS::authorize: authorize (GDiOS)\endlink.
 * 
 * \see  \link iccerrors Good Inter-Container Communication Errors\endlink
 * \see \link GDServiceClient GDServiceClient\endlink for the parts of the API that are specific to
 * service consumers.
 * \see  \link GDiOS::getServiceProvidersFor:andVersion:andType:  getServiceProvidersFor:  (GDiOS)\endlink for the service discovery API.
 * \see \ref GDSecureDocs for details of the deprecated Secure Documents API.
 * 
<H3>Good Inter-Container Communication</H3> The Good
 * Inter-Container Communication (ICC) system is a means of exchanging data
 * securely between two Good Dynamics applications running on the same mobile
 * device. The security of data is not compromised during exchange.
 *
 * Interaction in the ICC system follows a service consumer-provider model.
 * One application initiates communication by sending a service request to
 * another.
 * The initiating application is the service consumer.
 * The application that receives the request is the service provider.
 *
 * After receiving the service request, the provider executes the necessary
 * processing and could then send a service response back to the consumer.
 * Both the service request and the service response, if any, can contain a
 * number of parameters and file attachments. See under Service Parameters and
 * File Attachments, below.
 *
 * The sequence of APIs used in a typical ICC interaction is as follows:
 * -# The consumer application calls the service discovery API.
 * -# The consumer application calls  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink.
 * -# The  \link GDServiceDelegate::GDServiceDidReceiveFrom:forService:withVersion:forMethod:withParams:withAttachments:forRequestID: GDServiceDidReceiveFrom\endlink callback in the provider
 *    application is invoked by the ICC system.
 * -# The provider application executes any required processing and then calls
 *     \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink.
 * -# The  \link GDServiceClientDelegate::GDServiceClientDidReceiveFrom:withParams:withAttachments:correspondingToRequestID: GDServiceClientDidReceiveFrom\endlink callback in the
 *    consumer is invoked by the ICC system.
 * .
 * Note that an ICC interaction can be initiated with any GD application whose
 * native application identifier is known in the service consumer.
 * The identifier could be known by being present in the application code or, as
 * shown in the above, could be obtained at run time by using Good Dynamics
 * service discovery.
 * See  \link GDiOS::getServiceProvidersFor:andVersion:andType:  getServiceProvidersFor:  (GDiOS)\endlink for details of the service discovery API.
 *
 * Note that the service provider does not necessarily send a response, i.e. the
 * call to <TT>replyTo</TT> and subsequent invocation of the callback in the
 * consumer do not necessarily take place. The service definition specifies when
 * and whether the provider sends a response, see under Service Definition,
 * below.
 * 
 * The data for requests and responses is sent across a secure connection.
 * The connection is established and maintained as necessary by the Good
 * Dynamics Runtime.
 * This is transparent to the applications, although not always to the end user
 * since the device may sometimes "flip" between applications during ICC
 * interaction. See also the Foreground Execution section, below.
 *
 * The ICC system cannot be used when running under
 * \ref enterprisesimulation.
 *
 * <H3>Service Definition</H3>
 * The service provided by an application may conform to a declared service
 * definition. The declaration, if there is one, will specify the following:
 * - Name of the service, conventionally a reversed Internet domain followed by
 *   a number of sub-domains separated by full stops (periods). Formally,
 *   service names conform to the &lt;subdomain&gt; format defined in section
 *   2.3.1 of <A
 *      HREF="http://www.ietf.org/rfc/rfc1035.txt"
 *      target="_blank"
 *   >RFC1035</A>.
 * - Methods that comprise the service.
 * - Expected parameters to service requests, per method.
 * - Expected file attachments to service requests, per method.
 * - Whether and in what circumstances service responses will be issued, per
 * method.
 * - What types of service response will be issued, per method.
 * - Expected parameters to service responses, per method and per type.
 * - Expected file attachments to service responses, per method and per type.
 * - Error conditions that are specific to the service.
 * .
 * An application that registers as providing a service for which there is a
 * definition must adhere to the definition. Similarly, an application that
 * consumes a service that is based on a declared definition should only send
 * requests that conform to the definition. 
 * 
 * The service definition for a public service may be published to the Good
 * Dynamics Network (GDN) website. The published definition may include a link
 * to a more detailed API for the service. In any case, the service API may be
 * obtained from the developer of a service provider application, or from the
 * creator of the service definition.
 *
 * \see \ref ICCServiceDefinition for a description of Good Dynamics service
 * definition.
 *
 * <H3>Service Parameters</H3>
 * An ICC service request can include a number of parameters, sent by the
 * consumer.
 * Service responses can also include parameters, sent by the provider to convey
 * detailed results to the consumer.
 * The parameters in a request or response are always provided to the
 * application as a single object.
 * The ICC system supports a number of types of service parameter object.
 * 
 * Good Dynamics service definitions declare the expected types of parameter
 * object for requests and responses for each method in a service. The Good
 * Dynamics service definition language uses platform-independent terms for the
 * declaration. The terms, and the native types that would be used to represent
 * a parameter of that type, are listed in the following table.<TABLE
 *     ><TR><TH
 *         >Service Definition</TH
 *     ><TH
 *         >Native</TH
 * 
 *     ></TR><TR><TD
 *         >string</TD
 *     ><TD
 *         ><TT>NSString</TT></TD
 * 
 *     ></TR><TR><TD
 *         >number</TD
 *     ><TD
 *         ><TT>NSNumber</TT></TD
 *
 *     ></TR><TR><TD
 *         >integer</TD
 *     ><TD
 *         ><TT>NSNumber</TT></TD
 *
 *     ></TR><TR><TD
 *         >boolean</TD
 *     ><TD
 *         ><TT>NSNumber</TT></TD
 *
 *     ></TR><TR><TD
 *         >null</TD
 *     ><TD
 *         ><TT>NSNull</TT></TD
 *
 *     ></TR><TR><TD
 *         >UInt8Array</TD
 *     ><TD
 *         ><TT>NSData</TT></TD
 *
 *     ></TR><TR><TD
 *         >array</TD
 *     ><TD
 *         ><TT>NSArray</TT> of any of the
 *         simple types listed above.</TD
 *
 *     ></TR><TR><TD
 *         >object</TD
 *     ><TD
 *         ><TT>NSDictionary</TT> of key-value
 *         pairs, with any of the above types as values.</TD
 * 
 *     ></TR
 * ></TABLE>
 *
 * Note that the service name, version, and method name are not service
 * parameters as such and are not included in the parameters object.
 *
 * Error responses can include additional details of the error condition.
 * For example, if a parameter exceeds a maximum value, then the additional
 * details could include the value of the maximum.
 * Additional details are specified in the service definition, per condition, in
 * the same way as service parameters. Additional detail values are handled as 
 * entries in the <TT>userInfo</TT> dictionary in an <TT>NSError</TT> object.
 * 
 * <H3>File Attachments</H3>
 * An ICC service request can include a number of file attachments specified by
 * the consumer.
 * Service responses can also include file attachments, when these are sent by
 * the provider as results.
 *
 * File attachments are sent from the secure store of one application, and
 * copied to the secure store of the other application.
 * Deletion of the recipient's copy of the file is the responsibility of the
 * recipient application. The ICC system does not delete copies of files
 * that were attached to a request or response.
 *
 * In the API, the sending application specifies file attachments as paths in
 * its secure store.
 * The ICC system copies the files to the receiving application's secure
 * store, and then invokes a callback in the receiving application.
 * The callback is passed the paths of the copies, which it can open in the
 * usual manner.
 *
 * The ICC system uses the following naming convention to construct the paths of
 * the receiving application's copies:\n
 * <EM>Inbox Directory</EM><TT>/</TT
 * ><EM>Sender</EM><TT>/</TT
 * ><EM>Reference time</EM><TT>/</TT
 * ><EM>Original Path</EM>\n
 * Where:\n
 * <EM>Sender</EM> is the native application identifier of the sending
 * application.\n
 * <EM>Reference time</EM> is the date and time at which the ICC system started
 * handling the file attachments, down to a millisecond resolution.
 *
 * Note that all the files attached to a particular service request or response
 * will be placed under one directory. This means that the receiving application
 * can delete all these files easily, by deleting the directory.
 *
 * The ICC system supports the sending of empty files in the current release,
 * but did not in some earlier releases.
 * 
 * \see  \link GDFileSystem\endlink for the secure fi<TT></TT>le system API
 *
 * <H3>Foreground Execution</H3>
 * An ICC service request can specify a preference that the application that
 * provides the service executes in foreground in order to process the request.
 * This could be used when request processing always requires user interaction,
 * for example if the service is a special web browser or document editor.
 * See the <TT>option</TT> parameter of the  \link GDServiceClient::sendTo:withService:withVersion:withMethod:withParams:withAttachments:bringServiceToFront:requestID:error: sendTo (GDServiceClient)\endlink
 * function.
 *
 * Similarly, an ICC service response can specify a preference that the
 * service consumer application executes in foreground in order to process the
 * response. This might be used to return the original application to the
 * foreground. See the <TT>option</TT> parameter of the  \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink
 * function.
 *
 * It is also possible that a service provider itself determines its need to
 * execute in foreground in order to process a particular request, after the
 * request has been received. This is supported in ICC by use of the "Front
 * Request" API.
 *
 * The Front Request API has two parts: send and receive. In principle, any GD
 * application can send a front request to any other GD application, and any GD
 * application could receive a front request from any other GD application. In
 * practice, a front request is typically sent to the consumer of a service by
 * the provider of the service.
 *
 * The following scenario illustrates the typical sequence of events in which
 * the Front Request API is utilized.
 * -# Service consumer application sends a request that is to be executed in
 *    background.
 * -# Service provider application receives the request but determines that
 *    processing can only take place in foreground.
 * -# Service provider sends a front request to the service consumer. See under
 *    Front Request API, below, for details.
 * -# Service consumer receives the front request. See under Front Request
 *    API, below, for details.
 * -# Service consumer brings the provider to the foreground, by calling the
 *     \link GDServiceClient::bringToFront:error: bringToFront:\endlink function.
 * -# Service provider completes processing of the original request.
 * .
 * Note that the service consumer could also leave the provider in background,
 * in which case the service request would be expected to fail in some way.
 *
 * A service provider might need to process a service request in foreground
 * because:
 * - User interaction is necessary, and this could not be predicted in the
 *   service consumer before the service request was sent.
 * - The time needed to process the request exceeds the time that is likely to
 *   be allowed to the provider to run in background.
 * .
 *
 * In general, only the application that is currently running in foreground can
 * bring another application to the foreground. In the scenario that neither the
 * service consumer nor provider are in foreground, for example because the user
 * chose to take a call or started a third application, then neither application
 * can be brought to foreground by the other.
 * 
 * <H3>Front Request API</H3>
 * The Front Request API is defined as a Good Dynamics service within the ICC
 * system.
 *
 * The formal service definition of the Front Request API is as follows.
 * \code
 * {
 *     "service-id": "com.good.gd.icc",
 *     "version": "1.0.0.0",
 *     "title": "ICC Service ",
 *     "description": "ICC is a special Good Dynamics service created by Good
 * Technology. This service is for control of the Inter-Container Communication
 * channel.",
 *     "methods": {
 *         "FRONT_REQ": {
 *             "description": "The service consumer calls this method to request
 * that the service provider places the service consumer in foreground."
 *         }
 *     }
 * }
 * \endcode
 *
 * To send a front request, then, an application calls the 
 * <TT>sendTo:</TT> function, with the following
 * parameter values:
 * - <TT>sendTo:</TT> the native application
 *   identifier of the other application, which typically will have been
 *   supplied in a
 *   <TT>GDServiceDidReceiveFrom:</TT>
 *   invocation resulting from the original service request.
 * - <TT>withService:</TT> the
 *   <TT>GDFrontRequestService</TT> constant, which always has the
 *   service-id value, above.
 * - <TT>withVersion:</TT> <TT>"1.0.0.0"</TT>
 * - <TT>withMethod:</TT> <TT>"FRONT_REQ"</TT>
 * - <TT>withParams:</TT> <TT>nil</TT>
 * - <TT>withAttachments:</TT> <TT>nil</TT>
 * - <TT>bringServiceToFront:</TT> <TT>GDENoForegroundPreference</TT>
 * - <TT>requestID:</TT> Location of a local pointer or <TT>nil</TT>, as for any
 *   call to <TT>sendTo:</TT>
 * - <TT>error:</TT> Location of a local pointer or <TT>nil</TT>, as for any
 *   call to <TT>sendTo:</TT>
 * .
 * This causes a front request to be sent through the ICC system.
 *
 * The ICC system will deliver the front request in the same way as any other
 * service request, by invoking a callback in the provider application to which
 * the request is addressed. Note that, in the typical case, the service
 * provider here will actually be the application that was originally the
 * service consumer. This means that any application that consumes a service
 * whose provider might send back a front request must itself be a provider of
 * the Front Request API service. This includes meeting the generic requirements
 * for all service provider applications, which are detailed under Service
 * Provider Requirements, below.
 *
 * The invoked callback's application code for handling a Front Request API
 * service request should be restricted to:
 * - Identifying the received service request as a front request.
 * - Any checks that are required to determine whether the application should
 *   yield foreground execution to the application that sent the front request.
 * - A call to the  \link GDServiceClient::bringToFront:error: bringToFront:\endlink function, to be
 *   executed if all checks pass.
 * .
 * A minimal handler would identify a front request, make no checks, and then
 * always call the  \link GDServiceClient::bringToFront:error: bringToFront:\endlink function.
 * 
 * Note that the Front Request API service definition does not contain any
 * service responses or errors so the application must not send any. If the
 * application code checks do not pass and foreground execution is not to be
 * yielded, then the application need take no action.
 *
 * The following code snippet gives a simple utility function that could be
 * utilized in a callback as outlined above.
 * \code
 * + (BOOL)consumeFrontRequestService:(NSString*) serviceID forApplication:(NSString*) application forMethod:(NSString*) method withVersion:(NSString*)version
 * {
 *  if([serviceID isEqual:GDFrontRequestService] && [version isEqual:@"1.0.0.0"])
 *  {
 *      if([method isEqual:GDFrontRequestMethod])
 *      {
 *          [GDService bringToFront:application error:nil];
 *          return YES;
 *      }
 *  }
 * return NO;
 * }
 * \endcode
 *
 * <H3>Service Provider Requirements</H3>
 * To function as an ICC service provider, a GD application must:
 * - Instantiate a single object of the <TT>GDSer</TT><TT>vice</TT> class.
 * - Set the
 *   <TT>delegate</TT> property to point
 *   to an object of a class that implements the
 *   <TT>GDServiceDelegate</TT>
 *   protocol, typically
 *   <TT>self</TT>.
 * - Register the ICC URL type on the
 *   device. This will normally be achieved by utilizing the mandatory Good
 *   Dynamics build-time configuration, as detailed in the
 *   \link GDiOS\endlink class reference.
 * .
 * Note that an application that provides multiple services still instantiates
 * only a single object of this class.
 * The delegate of the object handles requests for all the services that the
 * application provides.
 *
 * To be on the list returned by a service discovery query, an application must
 * be registered as a service provider. Register the application as a service
 * provider:
 * - In the enterprise Good Control console, if an in-house application.
 * - Using the Good Developer Network website, if a partner application.
 * .
 * In either user interface, enter the
 * native bundle identifier of the application, for example
 * "com.example.application.name". Different bundle identifiers can be entered
 * for different device types.
 * 
 * See  \link GDiOS::getServiceProvidersFor:andVersion:andType:  getServiceProvidersFor:  (GDiOS)\endlink for details of the service discovery API.
 */
@interface GDService : NSObject

+ (BOOL) replyTo:(NSString*)application
      withParams:(id)params
 bringClientToFront:(GDTForegroundOption)option
 withAttachments:(NSArray*)attachments
       requestID:(NSString*)requestID
           error:(NSError**)error;
/**< Send a Good Inter-Container Communication response or error message.
 * Call this function to respond to a consumer application from which a
 * service request has been received in the Good Inter-Container Communication
 * (ICC) system. The response can include a results object and file attachments
 * to be conveyed to the consumer application. The results object will notify
 * the consumer of the success or failure of the request.
 * 
 * For an overall description of ICC see the   \link GDService GDService class reference\endlink.
 *
 * If the request failed for any reason, pass an <TT>NSError</TT> as the
 * results object. Populate the <TT>NSError</TT> with a suitable error code and
 * a <TT>localizedDescription</TT>.
 * Add any additional data to the <TT>userInfo</TT> dictionary.
 * The error domain will be set by the Good Dynamics Runtime to be the same as
 * the service name. See also the <A
 *     href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSError_Class/Reference/Reference.html"
 *     target="_blank"
 * >NSError class reference</A> in the iOS Developer Library on apple.com for
 * the full API.
 * 
 * If the request succeeded then pass a results object of a valid service
 * parameter type, as defined under Service Parameters in the
 *   \link GDService GDService class reference\endlink.
 * 
 * \param application <TT>NSString</TT> containing the native application idenitifer of
 * the consumer, as supplied in the original service request.
 *
 * \param params <TT>NSObject</TT> containing the
 * results object.
 *
 * \param option <TT>GDTForegroundOption</TT> specifying the foreground execution preference
 * after delivery of the response:\n
 * <TT>GDEPreferPeerInForeground</TT> for the consumer application being in the foreground,\n
 * <TT>GDEPreferMeInForeground</TT> for this application being in the foreground,\n
 * <TT>GDENoForegroundPreference</TT> to specify that there is no preference.\n
 * See also the notes under Foreground Execution in the   \link GDService GDService class reference\endlink.
 *
 * \param attachments <TT>NSArray</TT> of <TT>NSString</TT>
 * objects containing the paths of files in the Good Dynamics secure file system
 * that are to be attached to the response.
 * See under File Attachments in the   \link GDService GDService class reference\endlink.
 *
 * \param requestID <TT>NSString</TT> containing the ID of the service request to which
 * this is a response. The ID will have been passed as a parameter to the
 * delegated handler that implements the service.
 *
 *
 * \param error For returning an <TT>NSError</TT> object if an error occurs. If <TT>nil</TT>, no object will be returned. Note that this means errors that occur when attempting to deliver the response, and is <EM>not </EM> a reference to the results object.
 * \return <TT>YES</TT> if the response was accepted by the ICC system.
 * \return <TT>NO</TT> otherwise. The <TT>error</TT> location, if provided, will
 * be set to point to an <TT>NSError</TT> object with details of the error
 * condition.
 */

+ (BOOL) bringToFront:(NSString*)application error:(NSError**)error;
/**< Bring another application to the foreground.
 * Call this function to bring another application to the
 * foreground. This could be used when the application is a service provider, to
 * bring the service consumer back to the foreground without sending a response.
 * See under Foreground Execution in the   \link GDService GDService class reference\endlink for details.
 * 
 * This function cannot be used outside the context of service
 * request processing.
 *
 * \param application <TT>NSString</TT> containing the native application identifier of
 * the application to be brought to the foreground.
 *
 * \param error For returning an <TT>NSError</TT> object if an error occurs. If <TT>nil</TT>, no object will be returned.
 * \return <TT>YES</TT> if the specified application was brought to the
 * foreground, based on the return code from the native API.
 * \return <TT>NO</TT> otherwise.
 */

@property (assign, getter = getDelegate, setter = setDelegate:) id<GDServiceDelegate> delegate;
/**< Handler that implements the services provided by the application.
 * When an ICC service request is received, the Good Dynamics Runtime
 * dispatches an event to a callback function within the application.
 * 
 * Set this property to an instance of a class in the application that contains
 * the code for the required callback function.
 * The callback must:
 * - Implement the  \link GDServiceDelegate GDServiceDelegate\endlink 
 *   protocol.
 * - Process received service requests in accordance with the API of the
 *   service provided. The API could be, for example, a Good Dynamics service
 *   definition.
 * .
 * The processing could include calling  \link GDService::replyTo:withParams:bringClientToFront:withAttachments:requestID:error: replyTo (GDService)\endlink to issue a
 * service response.
 * 
 */

@end


#endif
